name: Verify Library

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        default: '18.x'
        required: false
        type: string
      TEST_NODE_OPTIONS:
        required: false
        type: string
        default: '--max_old_space_size=4096'
      TIMEOUT:
        default: 30
        required: false
        type: number
      ENABLE_BUILDING:
        default: true
        required: false
        type: boolean
      ENABLE_TESTING:
        default: true
        required: false
        type: boolean
      ENABLE_COVERAGE:
        default: true
        required: false
        type: boolean
      ENABLE_TYPES_CHECK:
        default: false
        required: false
        type: boolean
      ENABLE_FORMAT_CHECK:
        default: false
        required: false
        type: boolean
      ENABLE_SIZE_LIMIT_CHECK:
        default: false
        required: false
        type: boolean
      ENABLE_VISUAL_TESTING:
        default: false
        required: false
        type: boolean
      ENABLE_PLAYWRIGHT:
        default: false
        required: false
        type: boolean
      IS_MONOREPO:
        default: false
        required: false
        type: boolean
      ENABLE_SLACK_NOTIFICATION:
        default: true
        required: false
        type: boolean
      SLACK_NOTIFICATION_SECRET:
        default: 'SLACK_WEBHOOK_PLATFORM_NONPROD'
        required: false
        type: string

    secrets:
      NPM_READ_TOKEN:
        required: true
      # Secret needed when ENABLE_VISUAL_TESTING = true:
      # - CI_SERVICE_ACCOUNT
      # - PERCY_TOKEN
      CI_SERVICE_ACCOUNT:
        required: false
      PERCY_TOKEN:
        required: false
      LIBRARY_CI_SERVICE_ACCOUNT:
        required: true

env:
  NODE_VERSION: ${{ inputs.NODE_VERSION }}

jobs:
  verify:
    name: verify
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.TIMEOUT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Install dependencies with Yarn-Berry
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_READ_TOKEN }}
        run: yarn install --immutable

      - name: Verify lint
        run: yarn lint

      - name: Check types
        if: inputs.ENABLE_TYPES_CHECK
        ## TODO: Ensure all libraries with types check enabled implement types command according to their needs
        run: yarn types:check

      - name: Check formatting
        if: inputs.ENABLE_FORMAT_CHECK
        ## TODO: Ensure all libraries with format check enabled implement format:check command according to their needs
        run: yarn format:check

      - name: Test
        if: inputs.ENABLE_TESTING && inputs.ENABLE_COVERAGE == false
        env:
          NODE_OPTIONS: ${{ inputs.TEST_NODE_OPTIONS }}
        run: yarn test

      - name: Test
        if: inputs.ENABLE_TESTING && inputs.ENABLE_COVERAGE
        env:
          NODE_OPTIONS: ${{ inputs.TEST_NODE_OPTIONS }}
        run: yarn test:cov

      - name: Build app
        if: inputs.ENABLE_BUILDING
        run: yarn build

      # TODO: Check with team if pantry is ready to switch to andresz1/size-limit-action
      #
      # TODO: [PLAT-2557] Skipped until size limit settings are in main (since it runs main size check for diff comment)
      # - name: Check build size
      #   if: inputs.ENABLE_SIZE_LIMIT_CHECK
      #   uses: andresz1/size-limit-action@v1.7.0
      #   with:
      #     github_token: ${{ secrets.GITHUB_TOKEN }}
      #     skip_step: install
      #     script: yarn size --json
      #
      # TODO: [PLAT-2557] Replace with andresz1/size-limit-action once size-limit settings are in main (needed for diff)
      - name: Size Check
        if: inputs.ENABLE_SIZE_LIMIT_CHECK
        run: yarn size:check

      - name: Authenticate with Google Cloud
        if: inputs.ENABLE_VISUAL_TESTING || inputs.ENABLE_PLAYWRIGHT
        uses: google-github-actions/auth@v2
        with:
          project_id: reside-stage
          credentials_json: ${{ secrets.CI_SERVICE_ACCOUNT }}

      - name: Set up Google Cloud CLI
        if: inputs.ENABLE_VISUAL_TESTING || inputs.ENABLE_PLAYWRIGHT
        uses: google-github-actions/setup-gcloud@v2
        with:
          skip_install: true

      - name: Run Playwright integration tests and upload preview
        if: inputs.ENABLE_PLAYWRIGHT
        uses: reside-eng/workflow-templates-library/.github/actions/playwright@v1
        id: playwright
        with:
          service-account: ${{ secrets.CI_SERVICE_ACCOUNT }}

      - name: Run Storybook and upload preview
        if: inputs.ENABLE_VISUAL_TESTING
        uses: reside-eng/workflow-templates-library/.github/actions/storybook@v1
        id: storybook
        with:
          percy-token: ${{ secrets.PERCY_TOKEN }}
          # Skip running of Percy through storybook if PR is draft
          skip-percy: ${{ github.event.pull_request.draft == true }}

      - name: Comment preview links
        if: steps.storybook.outputs.preview-url != '' || steps.playwright.outputs.preview-url != ''
        uses: reside-eng/workflow-templates-library/.github/actions/previews-comment@v1
        with:
          storybook-preview-url: ${{ steps.storybook.outputs.preview-url }}
          playwright-preview-url: ${{ steps.playwright.outputs.preview-url }}

      - name: CI Analytics
        if: always()
        continue-on-error: true
        uses: reside-eng/workflow-templates-library/.github/actions/ci-analytics@v1
        with:
          RESULT: ${{ job.status }}
          CI_SERVICE_ACCOUNT: ${{ secrets.LIBRARY_CI_SERVICE_ACCOUNT }}

  notification:
    if: always() && inputs.ENABLE_SLACK_NOTIFICATION
    name: notification
    needs: [verify]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v5

      - uses: technote-space/workflow-conclusion-action@v3.0.3

      - uses: reside-eng/workflow-status-notification-action@v1
        with:
          current-status: ${{ env.WORKFLOW_CONCLUSION }}
          slack-webhook: ${{ secrets[ inputs.SLACK_NOTIFICATION_SECRET ] }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
