name: Release Library

on:
  workflow_call:
    inputs:
      NODE_VERSION:
        default: '18.x'
        required: false
        type: string
      TIMEOUT:
        default: 15
        required: false
        type: number
      PACKAGE_MANAGER:
        default: yarn-berry
        required: false
        type: string
      ENABLE_BUILDING:
        default: true
        required: false
        type: boolean
      ENABLE_TESTING:
        default: true
        required: false
        type: boolean
      ENABLE_VISUAL_TESTING:
        default: false
        required: false
        type: boolean
      IS_MONOREPO:
        default: false
        required: false
        type: boolean
      ENABLE_SLACK_NOTIFICATION:
        default: true
        required: false
        type: boolean
      SLACK_NOTIFICATION_SECRET:
        default: 'SLACK_WEBHOOK_PLATFORM_PROD'
        required: false
        type: string

    secrets:
      NPM_PUBLISH_TOKEN:
        required: true
      #Note: Due to some github actions limitations all the slack webhook secrets that could be used by the librairies need to be added here with required: false
      SLACK_WEBHOOK_CORE_NON_PROD:
        required: false
      SLACK_WEBHOOK_PLATFORM_PROD:
        required: false
      SLACK_WEBHOOK_PLATFORM_SERVICES_NONPROD:
        required: false
      #Secret needed when ENABLE_VISUAL_TESTING = true:
      # - SIDE_CI_APPLICATION_ID
      # - SIDE_CI_APPLICATION_PRIVATE_KEY
      # - PERCY_TOKEN
      SIDE_CI_APPLICATION_ID:
        required: false
      SIDE_CI_APPLICATION_PRIVATE_KEY:
        required: false
      PERCY_TOKEN:
        required: false

env:
  NODE_VERSION: ${{ inputs.NODE_VERSION }}

jobs:
  release:
    name: release
    runs-on: ubuntu-latest
    timeout-minutes: ${{ inputs.TIMEOUT }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure NPM auth token
        if: inputs.PACKAGE_MANAGER == 'yarn-berry'
        run: |
          yarn config set npmAuthToken ${{ secrets.NPM_PUBLISH_TOKEN }}

      - name: Configure Package Manager
        run: |
          echo Configuring NPM_TOKEN globally for .npmrc
          npm config set '//registry.npmjs.org/:_authToken' ${{ secrets.NPM_PUBLISH_TOKEN }}
          npm whoami

      - name: Install dependencies with Yarn-Berry
        if: inputs.PACKAGE_MANAGER == 'yarn-berry'
        run: |
          yarn install --immutable
          yarn prettier --write .yarnrc.yml

      - name: Install dependencies with Yarn
        if: inputs.PACKAGE_MANAGER == 'yarn'
        run: yarn install --frozen-lockfile

      - name: Test
        if: inputs.ENABLE_TESTING
        run: yarn test:cov

      - name: Upload coverage to Coveralls
        if: inputs.ENABLE_TESTING
        uses: coverallsapp/github-action@v2.1.2
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Build app
        if: inputs.ENABLE_BUILDING
        run: yarn build

      - name: Build Storybook
        if: inputs.ENABLE_VISUAL_TESTING
        run: yarn storybook:build

      - name: Publish Storybook to GH Pages
        if: inputs.ENABLE_VISUAL_TESTING
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs-dist

      - name: Percy Visual Testing
        if: inputs.ENABLE_VISUAL_TESTING
        env:
          PERCY_TOKEN: ${{ secrets.PERCY_TOKEN }}
        run: yarn percy

      - name: Semantic Release
        if: inputs.IS_MONOREPO == false
        uses: cycjimmy/semantic-release-action@v3
        id: semantic
        with:
          semantic_version: ^18
          branches: |
            [
              '+([0-9])?(.{+([0-9]),x}).x',
              'main',
              'next',
              'next-major',
              {name: 'beta', prerelease: true},
              {name: 'alpha', prerelease: true}
            ]
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get Token
        if: inputs.IS_MONOREPO
        id: get-workflow-token
        uses: peter-murray/workflow-application-token-action@v2
        with:
          application_id: ${{ secrets.SIDE_CI_APPLICATION_ID }}
          application_private_key: ${{ secrets.SIDE_CI_APPLICATION_PRIVATE_KEY }}
          permissions: 'administration:write, contents:write'

      - name: Configure Git to CI user
        if: inputs.IS_MONOREPO
        run: |
          # This is needed because Lerna will write to the CHANGELOG and push a commit to the repo
          git config --global user.email 23222038+reside-camacho@users.noreply.github.com
          git config --global user.name reside-camacho
          git remote set-url origin https://x-access-token:${GITHUB_TOKEN}@github.com/$GITHUB_REPOSITORY
        env:
          GITHUB_TOKEN: ${{ steps.get-workflow-token.outputs.token }}

      - name: Publish to @latest dist-tag
        if: github.ref == 'refs/heads/main' && inputs.IS_MONOREPO
        run: |
          echo lerna publish $LERNA_DEFAULT_ARGS --conventional-graduate
          yarn lerna publish $LERNA_DEFAULT_ARGS --conventional-graduate
        env:
          GH_TOKEN: ${{ steps.get-workflow-token.outputs.token }}
          LERNA_DEFAULT_ARGS: --exact --concurrency 1 --yes --conventional-commits --create-release github --allow-branch "*"

      - name: Publish to a prerelease dist-tag
        if: github.ref != 'refs/heads/main' && inputs.IS_MONOREPO
        run: |
          echo lerna publish $LERNA_DEFAULT_ARGS --conventional-prerelease --dist-tag ${GITHUB_REF##*/} --preid ${GITHUB_REF##*/}
          yarn lerna publish $LERNA_DEFAULT_ARGS --conventional-prerelease --dist-tag ${GITHUB_REF##*/} --preid ${GITHUB_REF##*/}
        env:
          GH_TOKEN: ${{ steps.get-workflow-token.outputs.token }}
          LERNA_DEFAULT_ARGS: --exact --concurrency 1 --yes --conventional-commits --create-release github --allow-branch "*"

  notification:
    if: always() && inputs.ENABLE_SLACK_NOTIFICATION
    name: notification
    needs: [release]
    runs-on: ubuntu-latest
    timeout-minutes: 5
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3.5.2

      - uses: technote-space/workflow-conclusion-action@v3.0.3

      - uses: reside-eng/workflow-status-notification-action@v1.2.2
        with:
          current-status: ${{ env.WORKFLOW_CONCLUSION }}
          slack-webhook: ${{ secrets[ inputs.SLACK_NOTIFICATION_SECRET ] }}
          github-token: ${{ secrets.GITHUB_TOKEN }}
