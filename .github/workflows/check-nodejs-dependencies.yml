name: This is for dependencies for Nodejs

on:
  workflow_call:
    inputs:
      WORKFLOW_NAME:
        required: true
        type: string
      # The git ref used for checking out code
      GIT_REF:
        required: true
        type: string
      # bucket name
      BUCKET_NAME:
        default: 'reside-stage.appspot.com'
        required: false
        type: string
      STATS_FOLDER:
        default: 'dependency-stats'
        required: false
        type: string
      # Default timeout for the job
      TIMEOUT:
        default: 30
        required: false
        type: number
      NODE_VERSION:
        default: '18.x'
        required: false
        type: string
      IS_MONOREPO:
        default: false
        required: false
        type: boolean
    secrets:
      LIBRARY_CI_SERVICE_ACCOUNT:
        required: true
      NPM_READ_TOKEN:
        required: true

jobs:
  check-dependencies:
    name: ${{ inputs.WORKFLOW_NAME }}
    timeout-minutes: ${{ inputs.TIMEOUT }}
    runs-on: ubuntu-latest
    env:
      SERVICE_NAME: ${{ github.event.repository.name }}
      GIT_REF: ${{ inputs.GIT_REF }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Use Node.js ${{ env.NODE_VERSION }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'yarn'

      - name: Configure Package Manager
      # NOTE: Used for npm outdated (run internally in reside-eng/npm-dependency-stats-action)
        run: |
          echo Configuring NPM_TOKEN globally for .npmrc
          npm config set '//registry.npmjs.org/:_authToken' ${{ secrets.NPM_READ_TOKEN }}
          npm whoami

      - name: Install dependencies with Yarn-Berry
        env:
          YARN_NPM_AUTH_TOKEN: ${{ secrets.NPM_READ_TOKEN }}
        run: yarn install --immutable

      - name: Check top level outdated
        id: dep-stats
        uses: reside-eng/npm-dependency-stats-action@PLAT-8693-2
        with:
          output-file: ./dep-stats.json
          is-monorepo: ${{ inputs.IS_MONOREPO }}

      - name: Authenticate with Google Cloud
        uses: google-github-actions/auth@v2
        with:
          project_id: reside-stage
          credentials_json: ${{ secrets.LIBRARY_CI_SERVICE_ACCOUNT }}

      # setup-gcloud without components is required to have the proper authentication for gsutil commands
      - name: Set up Google Cloud CLI
        uses: google-github-actions/setup-gcloud@v2
        with:
          install_components: ''

      - name: Upload dependency stats to Cloud Storage
        env:
          BUCKET: ${{ inputs.BUCKET_NAME }}
          STATS_FOLDER: ${{ inputs.STATS_FOLDER }}
          IS_MONOREPO: ${{ inputs.IS_MONOREPO }}
        run: |
          echo "Uploading results to Google Cloud Storage"
          if [ "$IS_MONOREPO" = "true" ]; then
            echo "Repo is monorepo, uploading dep stats for each package"
            for d in ./dep-stats/*; do
              folder=$(basename $d)
              gsutil -m -q cp $d/dep-stats.json gs://$BUCKET/$STATS_FOLDER/$folder/$(date +%Y-%m-%d_%H-%M-%S).json
              gsutil -m -q cp $d/dep-stats.json gs://$BUCKET/$STATS_FOLDER/$folder/latest.json
            done
          else
            gsutil -m -q cp ./dep-stats.json gs://$BUCKET/$STATS_FOLDER/$SERVICE_NAME/$(date +%Y-%m-%d_%H-%M-%S).json
            gsutil -m -q cp ./dep-stats.json gs://$BUCKET/$STATS_FOLDER/$SERVICE_NAME/latest.json
          fi
          echo "Successfully uploaded dependency stats to Cloud Storage"
